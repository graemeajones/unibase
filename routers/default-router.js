import { Router } from 'express';

//const API_URL = 'http://softwarehub.uk/unibase/api';
const API_URL = 'http://localhost:5000/api';

// Endpoints -------------------------------------

const listOfEndpoints = [
  {
    entity: 'Assessments',
    sap: '/api/assessments',
    services: {
      get: [
        {
          endpoint: '/',
          description: 'Returns all assessments',
          example: `${API_URL}/assessments`,
        },
        {
          endpoint: '/{id}',
          description: 'Returns the specific assessment identified by the id provided',
          example: `${API_URL}/assessments/1`,
        },
        {
          endpoint: '/module/{id}',
          description: 'Returns the set of assessments associated with the module identified by the id provided',
          example: `${API_URL}/assessments/module/1`,
        },
      ],
      post: {
        endpoint: '/',
        description: 'Insert a new assessment',
      },
      put: {
        endpoint: '/{id}',
        description: 'Update the specific assessment identified by the id provided',
      },
      delete: {
        endpoint: '/{id}',
        description: 'Delete the specific assessment identified by the id provided',
      },
    },
  },
  {
    entity: 'Assessment Types',
    sap: '/api/assessmenttypes',
    services: {
      get: [
        {
          endpoint: '/',
          description: 'Returns all assessment types',
          example: `${API_URL}/assessmenttypes`,
        },
        {
          endpoint: '/{id}',
          description: 'Returns the specific assessment type identified by the id provided',
          example: `${API_URL}/assessmenttypes/1`,
        },
      ],
      post: {
        endpoint: '/',
        description: 'Insert a new assessment type',
      },
      put: {
        endpoint: '/{id}',
        description: 'Update the specific assessment type identified by the id provided',
      },
      delete: {
        endpoint: '/{id}',
        description: 'Delete the specific assessment type identified by the id provided',
      },
    },
  },
  {
    entity: 'Groups',
    sap: '/api/groups',
    services: {
      get: [
        {
          endpoint: '/',
          description: 'Returns all groups',
          example: `${API_URL}/groups`,
        },
        {
          endpoint: '/{id}',
          description: 'Returns the specific group identified by the id provided',
          example: `${API_URL}/groups/1`,
        },
        {
          endpoint: '/project/{id}',
          description: 'Returns the set of groups associated with the project identified by the id provided.',
          example: `${API_URL}/groups/project/1`,
        },
        {
          endpoint: '/users/{id}',
          description: 'Returns the set of groups associated with the user identified by the id provided.',
          example: `${API_URL}/groups/users/276`,
        },
      ],
      post: {
        endpoint: '/',
        description: 'Insert a new group',
      },
      put: {
        endpoint: '/{id}',
        description: 'Update the specific group identified by the id provided',
      },
      delete: {
        endpoint: '/{id}',
        description: 'Delete the specific group identified by the id provided',
      },
    },
  },
  {
    endpoint: '/api/likes',
    description: "Returns all 'like' records.",
    example: `${API_URL}/likes`,
  },
  {
    endpoint: '/api/likes/liker/{id}',
    description: "Returns those 'like' records generated BY a specific user.",
    example: `${API_URL}/likes/liker/276`,
  },
  {
    endpoint: '/api/likes/likee/{id}',
    description: "Returns those 'like' records generated FOR a specific user.",
    example: `${API_URL}/likes/likee/276`,
  },
  {
    endpoint: '/api/modules',
    description: 'Returns all modules.',
    example: `${API_URL}/modules`,
  },
  {
    endpoint: '/api/modules/{id}',
    description: 'Returns the specific module identified by the id provided.',
    example: `${API_URL}/modules/1`,
  },
  {
    endpoint: '/api/modules/leader/{id}',
    description: 'Returns the set of modules associated with the module leader (user) identified by the id provided.',
    example: `${API_URL}/modules/leader/824`,
  },
  {
    endpoint: '/api/modules/users/{id}',
    description: 'Returns the set of modules associated with the student (user) identified by the id provided.',
    example: `${API_URL}/modules/users/276`,
  },
  {
    endpoint: '/api/projects',
    description: 'Returns all projects.',
    example: `${API_URL}/projects`,
  },
  {
    endpoint: '/api/projects/{id}',
    description: 'Returns the specific project identified by the id provided.',
    example: `${API_URL}/projects/1`,
  },
  {
    endpoint: '/api/projects/module/{id}',
    description: 'Returns the set of projects associated with the module identified by the id provided.',
    example: `${API_URL}/projects/module/4`,
  },
  {
    endpoint: '/api/projects/users/{id}',
    description: 'Returns the set of projects associated with the student (user) identified by the id provided.',
    example: `${API_URL}/projects/users/276`,
  },
  {
    endpoint: '/api/projectstatus',
    description: 'Returns the possible set of project status values.',
    example: `${API_URL}/projectstatus`,
  },
  {
    endpoint: '/api/users',
    description: 'Returns all users.',
    example: `${API_URL}/users`,
  },
  {
    endpoint: '/api/users/{id}',
    description: 'Returns the specific users identified by the id provided.',
    example: `${API_URL}/users/276`,
  },
  {
    endpoint: '/api/users/student',
    description: 'Returns those user records associated with the usertype student.',
    example: `${API_URL}/users/student`,
  },
  {
    endpoint: '/api/users/staff',
    description: 'Returns those users associated with the usertype staff.',
    example: `${API_URL}/users/staff`,
  },
  {
    endpoint: '/api/users/usertype/{id}',
    description: 'Returns the set of users associated with the usertype identified by the id provided.',
    example: `${API_URL}/users/usertype/1`,
  },
  {
    endpoint: '/api/users/groups/{id}',
    description: 'Returns the set of users associated with the group identified by the id provided.',
    example: `${API_URL}/users/groups/1`,
  },
  {
    endpoint: '/api/users/modules/{id}',
    description: 'Returns the set of users associated with the module identified by the id provided.',
    example: `${API_URL}/users/modules/4`,
  },
  {
    endpoint: '/api/users/likedby/{id}',
    description: 'Returns the set of users liked by the user identified by the id provided.',
    example: `${API_URL}/users/likedby/276`,
  },
  {
    endpoint: '/api/users/dislikedby/{id}',
    description: 'Returns the set of users disliked by the user identified by the id provided.',
    example: `${API_URL}/users/dislikedby/276`,
  },
  {
    endpoint: '/api/users/wholike/{id}',
    description: 'Returns the set of users who have liked the user identified by the id provided.',
    example: `${API_URL}/users/wholike/276`,
  },

  {
    endpoint: '/api/users/whodislike/{id}',
    description: 'Returns the set of users who have disliked the user identified by the id provided.',
    example: `${API_URL}/users/whodislike/276`,
  },
  {
    endpoint: '/api/usertypes',
    description: 'Returns the possible set of user type values.',
    example: `${API_URL}/usertypes`,
  },
  {
    endpoint: '/api/years',
    description: 'Returns the possible set of year cohort values.',
    example: `${API_URL}/years`,
  },
];

// Routers ---------------------------------------

export const domainRouter = new Router();

domainRouter.get('/', (req, res) =>
  res.status(200).json({
    message: 'List of available endpoints',
    listOfEndpoints,
  })
);

export const defaultRouter = new Router();

defaultRouter.get('/', (req, res) =>
  res.status(200).json({
    message: 'Specified endpoint not found',
    listOfEndpoints,
  })
);
